name: CI
on:
  push:
    branches:
      - main
    pull_request:
      - main

defaults:
  run:
    shell: bash

jobs:
  unit_test:
    name: Unit test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: "true"
      - run: npm install -g bats
      - name: Install Bats
        run: bats -v
      - name: Run unit tests
        run: bats ./test
  deb_package:
    name: Build debian package (artifact)
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: sudo apt-get install --yes --no-install-recommends lintian dpkg gzip
      - name: Build deb archive
        run: bash ci/make_deb_archive.sh
      - name: Lint deb archive
        run: lintian --fail-on error --fail-on warning --no-tag-display-limit release/*.deb
      - name: Upload deb package artifact
        uses: actions/upload-artifact@v3
        with:
          name: deb-package
          path: release/*.deb
          if-no-files-found: error
          retention-days: 5
  version_check:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.check.outputs.latest_tag }}
      source_version: ${{ steps.check.outputs.source_version }}
      is_release: ${{ steps.check.outputs.is_release }}
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3
      - name: Fetch tags
        # I've noticed sometimes checkout doesnt fetch tags
        run: git fetch --tags
      - name: Check Versions
        id: check
        run: |
          v=( $(bash ci/get_versions.sh) )
          echo "latest_tag=${v[0]} source_version=${v[1]} is_release=${v[2]}"
          echo "latest_tag=${v[0]}" >> "$GITHUB_OUTPUT"
          echo "source_version=${v[1]}" >> "$GITHUB_OUTPUT"
          echo "is_release=${v[2]}" >> "$GITHUB_OUTPUT"
  release:
    runs-on: ubuntu-latest
    needs: [version_check, deb_package, unit_test]
    if: success() && github.ref_name == 'main' && needs.version_check.outputs.is_release == 'true'
    env:
      VERSION: ${{needs.version_check.outputs.source_version}}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      assets: ${{ steps.release.outputs.assets }}
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: release/
      - name: Create Release Log
        run: bash ci/extract_latest_release.sh CHANGELOG.md > release/RELEASE_LOG.md
      - name: Display structure of downloaded files
        run: |
          ls -R ${{ github.workspace }}
          cat release/RELEASE_LOG.md
      - name: Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          name: Journalscript ${{ env.VERSION }}
          files: release/deb-package/journalscript*.deb
          body_path: release/RELEASE_LOG.md
          tag_name: ${{ env.VERSION }}
          fail_on_unmatched_files: true
          #prerelease: true
          #draft: true
          # run:|
          # gh release create ${VERSION} \
          # --notes-file release/RELEASE_LOG.md \
          # --title "Journalscript ${VERSION}" \
          # release/deb-package/journalscript*.deb
      - name: Download archive of released source
        run: gh release download "${VERSION}" --archive tar.gz --dir release/
      - name: Create Homebrew formula
        run: |
          SHA256=$(sha256sum release/*.tar.gz | cut -d ' ' -f 1)
          FORMULA_URL="https://github.com/${{ github.repository }}/archive/refs/tags/${VERSION}.tar.gz"
          bash ci/make_formula.sh "$FORMULA_URL" "$SHA256" "$VERSION"
      - name: Upload Homebrew Formula to Release
        run: gh release upload "${VERSION}" release/journalscript.rb
      - name: Set release as not draft
        run: gh release edit "${VERSION}" --draft=false
