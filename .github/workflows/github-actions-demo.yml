name: Journalscritp CICD pipeline
on:
  push:
    branches:
      - main
    pull_request:
      - main

defaults:
  run:
    shell: bash

jobs:
  unit_test:
    name: Unit test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: "true"
      - run: npm install -g bats
      - name: Install Bats
        run: bats -v
      - name: Run unit tests
        run: bats ./test
  build_man_page:
    name: Build man page
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies (pandoc)
        run: sudo apt-get install --yes pandoc
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Convert markup to man format
        run: pandoc --standalone --to=man --fail-if-warnings --output=release/journalscript.1 manpage.md
      - name: Upload man page
        uses: actions/upload-artifact@v3
        with:
          path: release/journalscript.1
          retention-days: 5
  deb_package:
    name: Build debian package (artifact)
    needs: [build_man_page]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: sudo apt-get install --yes --no-install-recommends lintian dpkg gzip
      - name: Download manpage
        uses: actions/download-artifact@v3
        with:
          path: journalscript.1
      - name: Build deb archive
        run: bash cicd/make_deb_archive.sh
      - name: Lint deb archive
        run: lintian --fail-on error --fail-on warning --no-tag-display-limit release/*.deb
      - name: Upload deb package artifact
        uses: actions/upload-artifact@v3
        with:
          path: release/*.deb
          if-no-files-found: error
          retention-days: 5
  version_check:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.check.outputs.latest_tag }}
      source_version: ${{ steps.check.outputs.source_version }}
      is_release: ${{ steps.check.outputs.is_release }}
    steps:
      - uses: actions/checkout@v3
      - name: Check Versions
        id: check
        run: |
          v=( $(bash cicd/get_versions.sh) )
          echo "latest_tag=${v[0]} source_version=${v[1]} is_release=${v[2]}"
          echo "latest_tag=${v[0]}" >> "$GITHUB_OUTPUT"
          echo "source_version=${v[1]}" >> "$GITHUB_OUTPUT"
          echo "is_release=${v[2]}" >> "$GITHUB_OUTPUT"
  release:
    runs-on: ubuntu-latest
    needs: [version_check, deb_package, unit_test]
    if: success() && github.ref_name == 'main' && needs.version_check.outputs.is_release == 'true'
    env:
      VERSION: ${{needs.version_check.outputs.source_version}}
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: release/
      - name: Display structure of downloaded files
        run: ls -R release/
      - name: Minor release
        uses: softprops/action-gh-release@v1
        with:
          name: Journalscript ${{ env.VERSION }}
          files: release/journalscript*.deb
          body_path: ${{ github.workspace }}-CHANGELOG-EXAMPLE.tx
          tag_name: ${{ env.VERSION }}
          draft: true
          fail_on_unmatched_files: true
