name: Journalscritp CICD pipeline
on:
  push:
    branches:
      - main
    pull_request:
      - main

defaults:
  run:
    shell: bash

jobs:
  unit_test:
    name: Unit test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: 'true'
      - run: npm install -g bats
      - name: Install Bats
        run: bats -v
      - name: Run unit tests
        run: bats ./test
  build_man_page:
    # run only if chages to man source page
    # This will depend on how many jobs will need the manual (thinking docs, hombrew, sources)
    # I may place the man page under release if source requires it
    runs-on: ubuntu-latest
    steps:
      - run: echo "Building man page."
  deb_package:
    name: Build debian package (artifact)
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "Building dev package"
      - name: Install dependencies
        run: sudo apt-get install --yes --no-install-recommends lintian
        #run: sudo apt-get install --yes --no-install-recommends lintian dpkg
      - name: Build deb archive
        run: bash cicd/make_deb_archive.sh
      - name: Lint deb archive
        run: lintian release/*.deb
        # TODO: fail on errors or warnings
      - name: Upload deb package artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: release/*.deb 
          retention-days: 5
          if-no-files-found: error
  version_check:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.check.outputs.latest_tag }}
      source_version: ${{ steps.check.outputs.source_version }}
      version_diff: ${{ steps.check.outputs.version_diff }}
      change_type: ${{ steps.check.outputs.change_type }}
    steps:
      - uses: actions/checkout@v3
      - name: Check Versions
        id: check
        run: |
          v=( $(bash cicd/get_versions.sh) )
          echo "latest_tag=${v[0]} source_version=${v[1]} version_diff=${v[2]} change_type=${v[3]}"
          echo "latest_tag=${v[0]}" >> "$GITHUB_OUTPUT"
          echo "source_version=${v[1]}" >> "$GITHUB_OUTPUT"
          echo "version_diff=${v[2]}" >> "$GITHUB_OUTPUT"
          echo "change_type=${v[3]}" >> "$GITHUB_OUTPUT"
          if [[ "${v[2]}" == "UNEXPECTED" ]]; then
            echo "::error title=Unexpected version::source_version is smaller than the current release version"
          fi
  release:
    runs-on: ubuntu-latest
    needs: [version_check, deb_package, unit_test]
    if: success() && github.ref_name == 'main' && ${{ needs.version_check.outputs.version_diff == 'NEW' }}
    env:
      CHANGE_TYPE: ${{needs.version_check.outputs.change_type}}
      VERSION: ${{needs.version_check.outputs.source_version}}
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: release/
      - name: Display structure of downloaded files
        run: ls -R release/
      - name: Patch release
        if: env.CHANGE_TYPE == 'PATCH'
        run: echo "update existing release release (patch it). VERSION=$VERSION"
      - name: Minor release
        if: env.CHANGE_TYPE == 'MINOR'
        uses: softprops/action-gh-release@v1
        with:
          name: env.VERSION
          files: release/journalscript-*
          tag_name: env.VERSION
      - name: Mayor release
        if: env.CHANGE_TYPE == 'MAYOR'
        run: echo "create brand new release VERSION=$VERSION"
