name: learn-github-actions
run-name: ${{ github.actor }} is learning GitHub Actions 🚀
on:
  push:
    branches:
      - main
    pull_request:
      - main

jobs:
  unit_test:
    # TODO: run only if changes to src/ or test/
    name: yaml is none-sense
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: 'true'
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - name: List files in the repository
        run: |
          ls -R ${{ github.workspace }}
      - run: npm install -g bats
      - run: bats -v
      - run: bats ./test
      - run: echo "🍏 This job's status is ${{ job.status }}."
  build-man-page:
    # run only if chages to man source page
    # This will depend on how many jobs will need the manual (thinking docs, hombrew, sources)
    # I may place the man page under release if source requires it
    runs-on: ubuntu-latest
    steps:
      - run: echo "Building man page."
  deb_package:
    # run only if chages to make_deb_script, man page, or /src
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "Building dev package"
      - name: List files in the repository
        run: |
          ls -R ${{ github.workspace }}
      - name: install dependencies
        run: sudo apt-get install --yes lintian dpkg
      - name: build deb archive
        run: bash cicd/make_deb_archive.sh
      - name: lint deb archive
        run: lintian release/*.deb
        # TODO: upload deb archive artifact. Always upload? yes, cus that's good for debugging
  version_check:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      latest_tag: $ {{ steps.version.check.latest_tag }}
      source_version: $ {{ steps.version.check.source_version }}
      version_diff: $ {{ steps.version.check.version_diff }}
      change_type: $ {{ steps.version.check.change_type }}
    steps:
      - uses: actions/checkout@v3
      - name: Check Versions
        id: check
        run: |
          v=( $(bash cicd/get_versions.sh) )
          echo "latest_tag=${v[0]} source_version=${v[1]} version_diff=${v[2]} change_type=${v[3]}"
          echo "latest_tag=${v[0]}" >> "$GITHUB_OUTPUT"
          echo "source_version=${v[1]}" >> "$GITHUB_OUTPUT"
          echo "version_diff=${v[2]}" >> "$GITHUB_OUTPUT"
          echo "change_type=${v[3]}" >> "$GITHUB_OUTPUT"
          if [ "${v[2]}" -eq "UNEXPECTED" ]; then
            echo "::error title=Unexpected version::source_version is smaller than the current release version"
          fi
  release:
    if: success() && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [version_check, deb_pacakge, unit_test]
    steps:
      - env:
          VERSION_DIFF: ${{ needs.version_check.outputs.version_diff }}
          CHANGE_TYPE: ${{ needs.version_check.outputs.change_type }}
          VERSION: ${{ needs.version_check.outputs.source_version }}
      - name: Patch release
        if: env.VERSION_DIFF == 'NEW' && env.CHANGE_TYPE == 'PATCH'
        run: echo "update existing release release (pathc it). VERSION=$VERSION"
      - name: Release Minor
        if: env.VERSION_DIFF == 'NEW' && env.CHANGE_TYPE == 'MINOR'
        run: echo "create brand new release VERSION=$VERSION"
      - name: Release Mayor
        if: env.VERSION_DIFF == 'NEW' && env.CHANGE_TYPE == 'MAYOR'
        run: echo "create brand new release VERSION=$VERSION"
